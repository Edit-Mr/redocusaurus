"use strict";(self.webpackChunkredocusaurus_website=self.webpackChunkredocusaurus_website||[]).push([[178],{7874:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var t=o(4246),i=o(1670);const s={title:"Migrating to V1",sidebar_position:4},d=void 0,r={id:"guides/migrating-to-v1",title:"Migrating to V1",description:"Options Changed",source:"@site/docs/guides/migrating-to-v1.md",sourceDirName:"guides",slug:"/guides/migrating-to-v1",permalink:"/redocusaurus/docs/guides/migrating-to-v1",draft:!1,unlisted:!1,editUrl:"https://github.com/rohit-gohri/redocusaurus/edit/main/website/docs/guides/migrating-to-v1.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Migrating to V1",sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Build Time Rendering",permalink:"/redocusaurus/docs/guides/build-time-rendering"},next:{title:"Who is using Redocusaurus?",permalink:"/redocusaurus/docs/who-is-using-redocusaurus"}},a={},c=[{value:"Options Changed",id:"options-changed",level:2},{value:"Options Removed",id:"options-removed",level:2},{value:"Component Changes",id:"component-changes",level:2},{value:"Experimental <code>@theme/ServerStyle</code> Removed",id:"experimental-themeserverstyle-removed",level:3},{value:"<code>@theme/Redoc</code> and <code>@theme/ApiDoc</code> prop changes",id:"themeredoc-and-themeapidoc-prop-changes",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"options-changed",children:"Options Changed"}),"\n",(0,t.jsxs)(n.p,{children:["1.",(0,t.jsx)(n.code,{children:"spec"})," - Can now be a path to a local file or an absolute url. You can now also point to an entrypoint for your multi-file OpenAPI definition and we will bundle it for you."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"routePath"})," -> ",(0,t.jsx)(n.code,{children:"route"})," (optional) - This still works the same, but is just optional now."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"redocOptions"})," -> ",(0,t.jsx)(n.code,{children:"options"})," (optional) - We have removed some defaults (",(0,t.jsx)(n.code,{children:"downloadUrl"})," used to be hidden by default) and leave the customization to the user now."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"options-removed",children:"Options Removed"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"specUrl"})," - This is now automatically handled by the package depending on the type of spec passed. We will bundle your definitions into a single downloadable YAML and add it as a static asset at build time."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"addRoute"})," - This is no longer needed since ",(0,t.jsx)(n.code,{children:"route"})," is now optional, so if you don't need a route just don't pass it."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"apiDocComponent"})," - This is no longer needed now since we provide a react-hook ",(0,t.jsx)(n.code,{children:"useSpecData"})," to load plugin data that can be used with the ",(0,t.jsx)(n.code,{children:"@theme/Redoc"})," component."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"component-changes",children:"Component Changes"}),"\n",(0,t.jsxs)(n.h3,{id:"experimental-themeserverstyle-removed",children:["Experimental ",(0,t.jsx)(n.code,{children:"@theme/ServerStyle"})," Removed"]}),"\n",(0,t.jsx)(n.p,{children:"Now build time/server side rendering works for everyone be default without needing to do anything."}),"\n",(0,t.jsxs)(n.h3,{id:"themeredoc-and-themeapidoc-prop-changes",children:[(0,t.jsx)(n.code,{children:"@theme/Redoc"})," and ",(0,t.jsx)(n.code,{children:"@theme/ApiDoc"})," prop changes"]}),"\n",(0,t.jsxs)(n.p,{children:["Instead of parsing api files yourself to pass to Redoc, we now have a new hook ",(0,t.jsx)(n.code,{children:"@theme/useSpecData"})," to load yaml files and the result can be directly passed to ",(0,t.jsx)(n.code,{children:"@theme/Redoc"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport Layout from '@theme/Layout';\nimport Redoc from '@theme/Redoc';\nimport useSpecData from '@theme/useSpecData';\n\nfunction CustomPage() {\n  const specData = useSpecData('using-custom-layout');\n  return (\n    <Layout\n      title=\"Custom Layout Docs\"\n      description=\"Example showing custom layout\"\n    >\n      <Redoc {...specData} />\n    </Layout>\n  );\n}\n\nexport default CustomPage;\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1670:(e,n,o)=>{o.d(n,{Z:()=>r,a:()=>d});var t=o(7378);const i={},s=t.createContext(i);function d(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);